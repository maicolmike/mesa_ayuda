*** RESUMEN DEL SCRITP ***
Este script está diseñado para importar usuarios desde un archivo CSV y almacenarlos en la base de datos de un proyecto Django. Los pasos principales del script son:

Configuración del entorno Django:
Se asegura de que Django pueda acceder a las configuraciones del proyecto y se prepara para usar sus modelos y funcionalidades.
Lectura del archivo CSV:
Abre y lee un archivo CSV que contiene información de usuarios, donde cada fila representa un usuario y las columnas contienen datos como username, email, etc.
Creación de usuarios:
Por cada fila del archivo:
Extrae los datos del usuario.
Crea una instancia del modelo User.
Asigna una contraseña encriptada basada en el username.
Guarda al usuario en la base de datos.
Imprime un mensaje de confirmación.


*** Pautas para entender el script ***
1-Configuración del entorno de Django:
-linea clave
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mesa_ayuda.settings')
Esto establece qué configuración de Django se debe usar para que el script pueda acceder a los modelos y configuraciones del proyecto.

-Uso de sys.path
sys.path.append('/home/cootep/Documents/programacion/mesa_ayuda')
Asegúrate de que la ruta sea correcta y que apunte al directorio principal del proyecto Django, donde se encuentra el archivo manage.py.

2-Modelo User:
El script importa un modelo llamado User desde la aplicación users.
Asegúrate de que el modelo tenga los campos definidos en el archivo CSV (username, email, etc.).

3-Estructura del archivo CSV:
El archivo debe tener una cabecera (primera línea) que coincida con los nombres de las columnas usados en el script:
username,email,identificacion,nombres,agencia
Verifica que el archivo CSV sea válido y esté codificado en utf-8.

4-Contraseñas encriptadas:
-Linea clave
user.password = make_password(username)
Usa el nombre de usuario como base para la contraseña y la encripta usando make_password.

5-Mensajes de confirmación:
Cada vez que se crea un usuario, se imprime un mensaje como:
print(f"Usuario {username} creado exitosamente")

6-Errores comunes a verificar:
-Ruta del archivo CSV:
Asegúrate de que la ruta especificada en file_path sea correcta y el archivo sea accesible.
-Configuración de Django:
Verifica que el módulo mesa_ayuda.settings exista y sea accesible.
-Campos del modelo User:
Los campos en el modelo deben coincidir con los datos proporcionados en el archivo CSV.

*** Recomendaciones para depurar y probar el script ***
1-Validar la configuración de Django:
Ejecuta el siguiente comando para verificar si el entorno está configurado correctamente:
python manage.py shell
Si puedes acceder al modelo User en el shell, el entorno está listo.

2-Probar el archivo CSV:
Antes de usar el archivo completo, prueba con un archivo pequeño que contenga solo 1 o 2 filas para asegurarte de que todo funciona.

3-Añadir manejo de errores:
Para evitar que el script se detenga si hay un error en una fila del archivo CSV, puedes envolver la lógica principal en un bloque try-except:
try:
    user.save()
except Exception as e:
    print(f"Error al crear el usuario {username}: {e}")

4-Revisar los registros creados:
Una vez que se ejecuta el script, verifica en la base de datos que los usuarios se hayan creado correctamente.